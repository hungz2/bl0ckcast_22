#!/bin/bash

# Blockcast Multi-Node Manager Script
# Ch·∫°y nhi·ªÅu Blockcast BEACON node tr√™n 1 VPS

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# C·∫•u h√¨nh c∆° b·∫£n
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
NODES_DIR="$SCRIPT_DIR/blockcast-nodes"
CONFIG_FILE="$SCRIPT_DIR/nodes-config.json"
DOCKER_COMPOSE_URL="https://raw.githubusercontent.com/Blockcast/beacon-docker-compose/main/docker-compose.yml"

# Hi·ªÉn th·ªã header
print_header() {
    echo -e "${BLUE}=====================================${NC}"
    echo -e "${BLUE}   Blockcast Multi-Node Manager${NC}"
    echo -e "${BLUE}=====================================${NC}"
}

# Hi·ªÉn th·ªã tr·ª£ gi√∫p
show_help() {
    echo -e "${YELLOW}C√°ch s·ª≠ d·ª•ng:${NC}"
    echo "  $0 setup                    - Thi·∫øt l·∫≠p ban ƒë·∫ßu"
    echo "  $0 add-node                 - Th√™m node m·ªõi"
    echo "  $0 start [node-name]        - Kh·ªüi ƒë·ªông node (ho·∫∑c t·∫•t c·∫£)"
    echo "  $0 stop [node-name]         - D·ª´ng node (ho·∫∑c t·∫•t c·∫£)"
    echo "  $0 restart [node-name]      - Kh·ªüi ƒë·ªông l·∫°i node"
    echo "  $0 status                   - Ki·ªÉm tra tr·∫°ng th√°i t·∫•t c·∫£ node"
    echo "  $0 logs [node-name]         - Xem logs c·ªßa node"
    echo "  $0 init [node-name]         - Generate keys cho node"
    echo "  $0 remove [node-name]       - X√≥a node"
    echo "  $0 list                     - Li·ªát k√™ t·∫•t c·∫£ node"
    echo "  $0 backup                   - Backup c·∫•u h√¨nh v√† keys"
    echo "  $0 test-proxy [proxy-url]   - Test proxy connection"
    echo "  $0 test-node-ip [node-name] - Ki·ªÉm tra IP c·ªßa node"
    echo "  $0 proxy-stats              - Th·ªëng k√™ s·ª≠ d·ª•ng proxy"
    echo "  $0 fix-compose [node-name]  - S·ª≠a l·ªói docker-compose.yml"
    echo ""
}

# Ki·ªÉm tra dependencies
check_dependencies() {
    echo -e "${YELLOW}Ki·ªÉm tra dependencies...${NC}"
    
    # Ki·ªÉm tra Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!${NC}"
        echo -e "${YELLOW}C√†i ƒë·∫∑t Docker:${NC}"
        echo "curl -fsSL https://get.docker.com | sh"
        echo "sudo usermod -aG docker \$USER"
        echo "newgrp docker"
        return 1
    fi
    
    # Ki·ªÉm tra Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo -e "${RED}Docker Compose ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!${NC}"
        echo -e "${YELLOW}C√†i ƒë·∫∑t Docker Compose:${NC}"
        echo "sudo apt install docker-compose-plugin"
        return 1
    fi
    
    # Ki·ªÉm tra jq
    if ! command -v jq &> /dev/null; then
        echo -e "${RED}jq ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. ƒêang c√†i ƒë·∫∑t...${NC}"
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt update && sudo apt install -y jq
        else
            echo "Vui l√≤ng c√†i ƒë·∫∑t jq th·ªß c√¥ng"
            return 1
        fi
    fi
    
    # Ki·ªÉm tra curl
    if ! command -v curl &> /dev/null; then
        echo -e "${RED}curl ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. ƒêang c√†i ƒë·∫∑t...${NC}"
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt install -y curl
        else
            echo "Vui l√≤ng c√†i ƒë·∫∑t curl th·ªß c√¥ng"
            return 1
        fi
    fi
    
    echo -e "${GREEN}Dependencies ƒë√£ s·∫µn s√†ng!${NC}"
}

# Thi·∫øt l·∫≠p ban ƒë·∫ßu
setup_initial() {
    print_header
    echo -e "${YELLOW}Thi·∫øt l·∫≠p ban ƒë·∫ßu Blockcast Multi-Node Manager...${NC}"
    
    check_dependencies
    
    # T·∫°o th∆∞ m·ª•c
    mkdir -p "$NODES_DIR"
    
    # T·∫°o config file n·∫øu ch∆∞a c√≥
    if [ ! -f "$CONFIG_FILE" ]; then
        echo '{"nodes": {}}' > "$CONFIG_FILE"
    fi
    
    echo -e "${GREEN}Thi·∫øt l·∫≠p ho√†n t·∫•t!${NC}"
    echo -e "${YELLOW}B∆∞·ªõc ti·∫øp theo: ./blockcast-multi-node-manager.sh add-node${NC}"
}

# Th√™m node m·ªõi
add_node() {
    print_header
    echo -e "${YELLOW}Th√™m Blockcast BEACON node m·ªõi...${NC}"
    
    # Nh·∫≠p th√¥ng tin node
    read -p "T√™n node: " node_name
    
    if [ -z "$node_name" ]; then
        echo -e "${RED}T√™n node kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!${NC}"
        return 1
    fi
    
    # Ki·ªÉm tra node ƒë√£ t·ªìn t·∫°i
    if jq -e ".nodes.\"$node_name\"" "$CONFIG_FILE" &> /dev/null; then
        echo -e "${RED}Node '$node_name' ƒë√£ t·ªìn t·∫°i!${NC}"
        return 1
    fi
    
    read -p "Watchtower port (m·∫∑c ƒë·ªãnh 8080): " watchtower_port
    read -p "Proxy (http://ip:port ho·∫∑c ƒë·ªÉ tr·ªëng): " proxy
    read -p "M√¥ t·∫£ node (t√πy ch·ªçn): " description
    
    watchtower_port=${watchtower_port:-8080}
    
    # Ki·ªÉm tra port c√≥ b·ªã tr√πng kh√¥ng
    if jq -e ".nodes | to_entries[] | select(.value.watchtower_port == \"$watchtower_port\")" "$CONFIG_FILE" &> /dev/null; then
        echo -e "${RED}Port $watchtower_port ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi node kh√°c!${NC}"
        return 1
    fi
    
    # Ki·ªÉm tra proxy c√≥ b·ªã tr√πng kh√¥ng (n·∫øu c√≥ proxy)
    if [ -n "$proxy" ]; then
        if jq -e ".nodes | to_entries[] | select(.value.proxy == \"$proxy\" and .value.proxy != \"\")" "$CONFIG_FILE" &> /dev/null; then
            echo -e "${YELLOW}C·∫£nh b√°o: Proxy $proxy ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi node kh√°c!${NC}"
            read -p "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (yes/no): " confirm_proxy
            if [ "$confirm_proxy" != "yes" ]; then
                echo -e "${YELLOW}H·ªßy b·ªè th√™m node.${NC}"
                return 0
            fi
        fi
        
        # Auto-fix proxy format
        if [[ ! "$proxy" =~ ^https?:// ]] && [[ ! "$proxy" =~ ^socks5?:// ]]; then
            echo -e "${YELLOW}Auto-fixing proxy format...${NC}"
            
            # N·∫øu proxy c√≥ d·∫°ng ip:port:user:pass, chuy·ªÉn th√†nh http://user:pass@ip:port
            if [[ "$proxy" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+:.+:.+ ]]; then
                IFS=':' read -r proxy_ip proxy_port proxy_user proxy_pass <<< "$proxy"
                proxy="http://${proxy_user}:${proxy_pass}@${proxy_ip}:${proxy_port}"
                echo -e "${GREEN}‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh: $proxy${NC}"
            # N·∫øu proxy ch·ªâ c√≥ ip:port, th√™m http://
            elif [[ "$proxy" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+$ ]]; then
                proxy="http://$proxy"
                echo -e "${GREEN}‚úÖ ƒê√£ th√™m protocol: $proxy${NC}"
            else
                echo -e "${YELLOW}C·∫£nh b√°o: Proxy format c√≥ th·ªÉ kh√¥ng ƒë√∫ng. ƒê·ªãnh d·∫°ng khuy·∫øn ngh·ªã: http://ip:port${NC}"
            fi
        fi
    fi
    
    # T·∫°o th∆∞ m·ª•c node
    node_dir="$NODES_DIR/$node_name"
    mkdir -p "$node_dir"
    
    # T·∫°o docker-compose.yml cho node
    echo -e "${YELLOW}T·∫°o docker-compose.yml...${NC}"
    create_node_compose "$node_name" "$watchtower_port" "$proxy"
    
    # L∆∞u config
    jq ".nodes.\"$node_name\" = {
        \"watchtower_port\": \"$watchtower_port\",
        \"proxy\": \"$proxy\",
        \"description\": \"$description\",
        \"directory\": \"$node_dir\",
        \"created_at\": \"$(date -Iseconds)\"
    }" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
    
    echo -e "${GREEN}Node '$node_name' ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!${NC}"
    echo -e "${YELLOW}B∆∞·ªõc ti·∫øp theo:${NC}"
    echo -e "1. ./blockcast-multi-node-manager.sh start $node_name"
    echo -e "2. ./blockcast-multi-node-manager.sh init $node_name"
    echo -e "3. ƒêƒÉng k√Ω node tr√™n https://app.blockcast.network/"
    
    if [ -n "$proxy" ]; then
        echo -e "${GREEN}‚úÖ Node s·ª≠ d·ª•ng proxy: $proxy${NC}"
        echo -e "${YELLOW}üí° Test proxy: curl --proxy $proxy https://google.com${NC}"
    fi
}

# Th√™m proxy environment variables cho compose file
add_proxy_to_compose() {
    local compose_file="$1"
    local proxy="$2"
    
    # Th√™m proxy environment cho x-service template
    if grep -q "x-service:" "$compose_file"; then
        # Th√™m environment v√†o x-service template
        if ! grep -A 20 "x-service:" "$compose_file" | grep -q "environment:"; then
            sed -i "/x-service:/,/^[[:space:]]*image:/ {
                /image:/a\\  environment:\\    - HTTP_PROXY=$proxy\\    - HTTPS_PROXY=$proxy\\    - NO_PROXY=localhost,127.0.0.1
            }" "$compose_file"
        fi
    fi
    
    # Th√™m environment cho watchtower service
    if ! grep -A 10 "watchtower:" "$compose_file" | grep -q "HTTP_PROXY"; then
        sed -i "/watchtower:/,/^[[:space:]]*[a-zA-Z_]/ {
            /environment:/a\\      HTTP_PROXY: \"$proxy\"\\      HTTPS_PROXY: \"$proxy\"\\      NO_PROXY: \"localhost,127.0.0.1\"
        }" "$compose_file"
        
        # N·∫øu watchtower ch∆∞a c√≥ environment section
        if ! grep -A 10 "watchtower:" "$compose_file" | grep -q "environment:"; then
            sed -i "/watchtower:/,/^[[:space:]]*[a-zA-Z_]/ {
                /WATCHTOWER_LABEL_ENABLE:/a\\    environment:\\      HTTP_PROXY: \"$proxy\"\\      HTTPS_PROXY: \"$proxy\"\\      NO_PROXY: \"localhost,127.0.0.1\"
            }" "$compose_file"
        fi
    fi
}

# T·∫°o docker-compose.yml cho node c·ª• th·ªÉ
create_node_compose() {
    local node_name="$1"
    local port="$2"
    local proxy="$3"
    
    local compose_dir="${NODES_DIR}/${node_name}"
    local compose_file="${compose_dir}/docker-compose.yml"
    
    # T·∫°o n·ªôi dung docker-compose.yml ch·ªâ thay ƒë·ªïi proxy, port v√† container names
    cat > "$compose_file" << EOF
x-service: &service
  image: blockcast/cdn_gateway_go:\${IMAGE_VERSION:-stable}
  restart: unless-stopped
  network_mode: "service:blockcastd"
  volumes:
    - \${HOME}/.blockcast/certs:/var/opt/magma/certs
    - \${HOME}/.blockcast/snowflake:/etc/snowflake
  labels:
    - "com.centurylinklabs.watchtower.enable=true"
EOF
    
    # Th√™m proxy environment n·∫øu c√≥
    if [ -n "$proxy" ]; then
        cat >> "$compose_file" << EOF
  environment:
    - HTTP_PROXY=$proxy
    - HTTPS_PROXY=$proxy
    - NO_PROXY=localhost,127.0.0.1
    - http_proxy=$proxy
    - https_proxy=$proxy
    - no_proxy=localhost,127.0.0.1
EOF
    fi
    
    # Services section - ch·ªâ thay ƒë·ªïi container names v√† port
    cat >> "$compose_file" << EOF

services:
  control_proxy:
    <<: *service
    container_name: ${node_name}-control_proxy
    command: /usr/bin/control_proxy

  blockcastd:
    <<: *service
    container_name: ${node_name}-blockcastd
    command: /usr/bin/blockcastd -logtostderr=true -v=0
    network_mode: bridge

  beacond:
    <<: *service
    container_name: ${node_name}-beacond
    command: /usr/bin/beacond -logtostderr=true -v=0

  watchtower:
    image: containrrr/watchtower
    container_name: ${node_name}-watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_LABEL_ENABLE=true
EOF
    
    # Th√™m proxy environment cho watchtower n·∫øu c√≥
    if [ -n "$proxy" ]; then
        cat >> "$compose_file" << EOF
      - HTTP_PROXY=$proxy
      - HTTPS_PROXY=$proxy
      - NO_PROXY=localhost,127.0.0.1
      - http_proxy=$proxy
      - https_proxy=$proxy
      - no_proxy=localhost,127.0.0.1
EOF
    fi
    
    # K·∫øt th√∫c watchtower v·ªõi volumes v√† ports
    cat >> "$compose_file" << EOF
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "${port}:8080"
EOF
}

# Modify docker-compose.yml ƒë·ªÉ thay ƒë·ªïi port v√† proxy
modify_docker_compose() {
    local compose_file="$1"
    local new_port="$2"
    local node_name="$3"
    local proxy="$4"
    
    # S·ª≠ d·ª•ng create_node_compose ƒë·ªÉ t·∫°o file m·ªõi
    create_node_compose "$node_name" "$new_port" "$proxy"
}

# Kh·ªüi ƒë·ªông node
start_node() {
    local node_name="$1"
    
    if [ -z "$node_name" ]; then
        echo -e "${YELLOW}Kh·ªüi ƒë·ªông t·∫•t c·∫£ node...${NC}"
        jq -r '.nodes | keys[]' "$CONFIG_FILE" | while read -r name; do
            start_single_node "$name"
        done
    else
        start_single_node "$node_name"
    fi
}

# Kh·ªüi ƒë·ªông m·ªôt node
start_single_node() {
    local node_name="$1"
    
    if ! jq -e ".nodes.\"$node_name\"" "$CONFIG_FILE" &> /dev/null; then
        echo -e "${RED}Node '$node_name' kh√¥ng t·ªìn t·∫°i!${NC}"
        return 1
    fi
    
    local node_dir=$(jq -r ".nodes.\"$node_name\".directory" "$CONFIG_FILE")
    
    if [ ! -f "$node_dir/docker-compose.yml" ]; then
        echo -e "${RED}Kh√¥ng t√¨m th·∫•y docker-compose.yml cho node '$node_name'!${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}Kh·ªüi ƒë·ªông node '$node_name'...${NC}"
    
    cd "$node_dir"
    
    # S·ª≠ d·ª•ng docker compose (phi√™n b·∫£n m·ªõi) ho·∫∑c docker-compose (phi√™n b·∫£n c≈©)
    if docker compose version &> /dev/null; then
        docker compose up -d
    else
        docker-compose up -d
    fi
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Node '$node_name' ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!${NC}"
        echo -e "${YELLOW}Ki·ªÉm tra tr·∫°ng th√°i: docker compose ps${NC}"
    else
        echo -e "${RED}L·ªói kh·ªüi ƒë·ªông node '$node_name'!${NC}"
    fi
}

# D·ª´ng node
stop_node() {
    local node_name="$1"
    
    if [ -z "$node_name" ]; then
        echo -e "${YELLOW}D·ª´ng t·∫•t c·∫£ node...${NC}"
        jq -r '.nodes | keys[]' "$CONFIG_FILE" | while read -r name; do
            stop_single_node "$name"
        done
    else
        stop_single_node "$node_name"
    fi
}

# D·ª´ng m·ªôt node
stop_single_node() {
    local node_name="$1"
    
    if ! jq -e ".nodes.\"$node_name\"" "$CONFIG_FILE" &> /dev/null; then
        echo -e "${RED}Node '$node_name' kh√¥ng t·ªìn t·∫°i!${NC}"
        return 1
    fi
    
    local node_dir=$(jq -r ".nodes.\"$node_name\".directory" "$CONFIG_FILE")
    
    echo -e "${YELLOW}D·ª´ng node '$node_name'...${NC}"
    
    cd "$node_dir"
    
    if docker compose version &> /dev/null; then
        docker compose down
    else
        docker-compose down
    fi
    
    echo -e "${GREEN}Node '$node_name' ƒë√£ d·ª´ng!${NC}"
}

# Kh·ªüi ƒë·ªông l·∫°i node
restart_node() {
    local node_name="$1"
    
    if [ -z "$node_name" ]; then
        echo -e "${YELLOW}Kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ node...${NC}"
        stop_node
        sleep 3
        start_node
    else
        echo -e "${YELLOW}Kh·ªüi ƒë·ªông l·∫°i node '$node_name'...${NC}"
        stop_single_node "$node_name"
        sleep 3
        start_single_node "$node_name"
    fi
}

# Generate keys cho node
init_node() {
    local node_name="$1"
    
    if [ -z "$node_name" ]; then
        echo -e "${RED}Vui l√≤ng ch·ªâ ƒë·ªãnh t√™n node!${NC}"
        return 1
    fi
    
    if ! jq -e ".nodes.\"$node_name\"" "$CONFIG_FILE" &> /dev/null; then
        echo -e "${RED}Node '$node_name' kh√¥ng t·ªìn t·∫°i!${NC}"
        return 1
    fi
    
    local node_dir=$(jq -r ".nodes.\"$node_name\".directory" "$CONFIG_FILE")
    
    echo -e "${YELLOW}Generate keys cho node '$node_name'...${NC}"
    echo -e "${YELLOW}ƒê·∫£m b·∫£o node ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông tr∆∞·ªõc!${NC}"
    
    cd "$node_dir"
    
    if docker compose version &> /dev/null; then
        docker compose exec blockcastd blockcastd init
    else
        docker-compose exec blockcastd blockcastd init
    fi
    
    echo -e "${GREEN}Keys ƒë√£ ƒë∆∞·ª£c generate!${NC}"
    echo -e "${YELLOW}L∆∞u √Ω quan tr·ªçng:${NC}"
    echo -e "1. Backup Hardware ID v√† Challenge Key"
    echo -e "2. Backup private key t·∫°i ~/.blockcast/certs/gw_challenge.key"
    echo -e "3. S·ª≠ d·ª•ng Registration URL ƒë·ªÉ ƒëƒÉng k√Ω node"
    echo -e "4. Ho·∫∑c truy c·∫≠p https://app.blockcast.network/register"
}

# Ki·ªÉm tra tr·∫°ng th√°i
check_status() {
    print_header
    echo -e "${YELLOW}Tr·∫°ng th√°i c√°c Blockcast BEACON node:${NC}"
    echo ""
    
    if [ ! -f "$CONFIG_FILE" ] || [ "$(jq '.nodes | length' "$CONFIG_FILE")" -eq 0 ]; then
        echo -e "${RED}Kh√¥ng c√≥ node n√†o ƒë∆∞·ª£c c·∫•u h√¨nh!${NC}"
        return 0
    fi
    
    printf "%-15s %-10s %-15s %-15s %-20s\n" "NODE NAME" "STATUS" "PORT" "PROXY" "DESCRIPTION"
    echo "============================================================================="
    
    jq -r '.nodes | to_entries[] | "\(.key) \(.value.watchtower_port) \(.value.proxy) \(.value.description)"' "$CONFIG_FILE" | while read -r name port proxy description; do
        local node_dir=$(jq -r ".nodes.\"$name\".directory" "$CONFIG_FILE")
        
        cd "$node_dir" 2>/dev/null || continue
        
        # Ki·ªÉm tra container status
        local containers_running=0
        local total_containers=4  # watchtower, beacond, blockcastd, control_proxy
        
        # S·ª≠ d·ª•ng docker compose ps th√¥ng th∆∞·ªùng thay v√¨ --format json
        if docker compose ps 2>/dev/null | grep -q "Up"; then
            containers_running=$(docker compose ps 2>/dev/null | grep -c "Up")
        elif docker-compose ps 2>/dev/null | grep -q "Up"; then
            containers_running=$(docker-compose ps 2>/dev/null | grep -c "Up")
        fi
        
        if [ "$containers_running" -eq "$total_containers" ]; then
            status="${GREEN}RUNNING${NC}"
        elif [ "$containers_running" -gt 0 ]; then
            status="${YELLOW}PARTIAL${NC}"
        else
            status="${RED}STOPPED${NC}"
        fi
        
        # Hi·ªÉn th·ªã proxy (r√∫t g·ªçn n·∫øu qu√° d√†i)
        local proxy_display="$proxy"
        if [ -n "$proxy" ] && [ ${#proxy} -gt 15 ]; then
            proxy_display="${proxy:0:12}..."
        elif [ -z "$proxy" ]; then
            proxy_display="None"
        fi
        
        printf "%-15s %-10s %-15s %-15s %-20s\n" "$name" "$status" "$port" "$proxy_display" "$description"
    done
}

# Xem logs
view_logs() {
    local node_name="$1"
    local service="$2"
    
    if [ -z "$node_name" ]; then
        echo -e "${RED}Vui l√≤ng ch·ªâ ƒë·ªãnh t√™n node!${NC}"
        echo -e "${YELLOW}S·ª≠ d·ª•ng: $0 logs <node-name> [service]${NC}"
        echo -e "${YELLOW}Services: blockcastd, beacond, control_proxy, watchtower${NC}"
        return 1
    fi
    
    if ! jq -e ".nodes.\"$node_name\"" "$CONFIG_FILE" &> /dev/null; then
        echo -e "${RED}Node '$node_name' kh√¥ng t·ªìn t·∫°i!${NC}"
        return 1
    fi
    
    local node_dir=$(jq -r ".nodes.\"$node_name\".directory" "$CONFIG_FILE")
    
    cd "$node_dir"
    
    if [ -z "$service" ]; then
        echo -e "${YELLOW}Xem logs t·∫•t c·∫£ services c·ªßa node '$node_name'${NC}"
        if docker compose version &> /dev/null; then
            docker compose logs -f
        else
            docker-compose logs -f
        fi
    else
        echo -e "${YELLOW}Xem logs service '$service' c·ªßa node '$node_name'${NC}"
        if docker compose version &> /dev/null; then
            docker compose logs -f "$service"
        else
            docker-compose logs -f "$service"
        fi
    fi
}

# X√≥a node
remove_node() {
    local node_name="$1"
    
    if [ -z "$node_name" ]; then
        echo -e "${RED}Vui l√≤ng ch·ªâ ƒë·ªãnh t√™n node!${NC}"
        return 1
    fi
    
    if ! jq -e ".nodes.\"$node_name\"" "$CONFIG_FILE" &> /dev/null; then
        echo -e "${RED}Node '$node_name' kh√¥ng t·ªìn t·∫°i!${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}C·∫¢NH B√ÅO: B·∫°n s·∫Øp x√≥a node '$node_name'${NC}"
    echo -e "${RED}ƒêi·ªÅu n√†y s·∫Ω x√≥a t·∫•t c·∫£ d·ªØ li·ªáu v√† c·∫•u h√¨nh c·ªßa node!${NC}"
    read -p "B·∫°n c√≥ ch·∫Øc ch·∫Øn? (yes/no): " confirm
    
    if [ "$confirm" != "yes" ]; then
        echo -e "${YELLOW}H·ªßy b·ªè x√≥a node.${NC}"
        return 0
    fi
    
    # D·ª´ng node tr∆∞·ªõc
    stop_single_node "$node_name"
    
    # X√≥a containers v√† volumes
    local node_dir=$(jq -r ".nodes.\"$node_name\".directory" "$CONFIG_FILE")
    cd "$node_dir"
    
    if docker compose version &> /dev/null; then
        docker compose down -v --remove-orphans
    else
        docker-compose down -v --remove-orphans
    fi
    
    # X√≥a th∆∞ m·ª•c
    if [ -d "$node_dir" ]; then
        rm -rf "$node_dir"
    fi
    
    # X√≥a kh·ªèi config
    jq "del(.nodes.\"$node_name\")" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
    
    echo -e "${GREEN}Node '$node_name' ƒë√£ ƒë∆∞·ª£c x√≥a ho√†n to√†n!${NC}"
}

# Li·ªát k√™ node
list_nodes() {
    print_header
    echo -e "${YELLOW}Danh s√°ch c√°c Blockcast BEACON node:${NC}"
    echo ""
    
    if [ ! -f "$CONFIG_FILE" ] || [ "$(jq '.nodes | length' "$CONFIG_FILE")" -eq 0 ]; then
        echo -e "${RED}Kh√¥ng c√≥ node n√†o ƒë∆∞·ª£c c·∫•u h√¨nh!${NC}"
        return 0
    fi
    
    jq -r '.nodes | to_entries[] | "Node: \(.key)\n  Port: \(.value.watchtower_port)\n  Proxy: \(.value.proxy // "None")\n  Description: \(.value.description)\n  Created: \(.value.created_at)\n  Directory: \(.value.directory)\n"' "$CONFIG_FILE"
}

# Backup c·∫•u h√¨nh
backup_config() {
    local backup_dir="$SCRIPT_DIR/backups"
    local backup_file="blockcast-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
    
    mkdir -p "$backup_dir"
    
    echo -e "${YELLOW}T·∫°o backup...${NC}"
    
    tar -czf "$backup_dir/$backup_file" \
        -C "$SCRIPT_DIR" \
        nodes-config.json \
        blockcast-nodes/ 2>/dev/null
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Backup th√†nh c√¥ng: $backup_dir/$backup_file${NC}"
        echo -e "${YELLOW}Backup bao g·ªìm:${NC}"
        echo -e "- File c·∫•u h√¨nh nodes"
        echo -e "- Docker compose files"
        echo -e "- D·ªØ li·ªáu containers"
    else
        echo -e "${RED}L·ªói t·∫°o backup!${NC}"
    fi
}

# Test proxy c·ªßa node
test_proxy() {
    local node_name="$1"
    
    if [ -z "$node_name" ]; then
        echo -e "${RED}Vui l√≤ng ch·ªâ ƒë·ªãnh t√™n node!${NC}"
        return 1
    fi
    
    if ! jq -e ".nodes.\"$node_name\"" "$CONFIG_FILE" &> /dev/null; then
        echo -e "${RED}Node '$node_name' kh√¥ng t·ªìn t·∫°i!${NC}"
        return 1
    fi
    
    local proxy=$(jq -r ".nodes.\"$node_name\".proxy" "$CONFIG_FILE")
    
    if [ -z "$proxy" ] || [ "$proxy" = "null" ]; then
        echo -e "${YELLOW}Node '$node_name' kh√¥ng s·ª≠ d·ª•ng proxy.${NC}"
        return 0
    fi
    
    echo -e "${YELLOW}Testing proxy $proxy cho node '$node_name'...${NC}"
    
    # Test basic connectivity
    if curl --proxy "$proxy" --connect-timeout 10 --max-time 30 -s https://google.com > /dev/null; then
        echo -e "${GREEN}‚úÖ Proxy ho·∫°t ƒë·ªông t·ªët!${NC}"
        
        # Get IP th√¥ng qua proxy
        local proxy_ip=$(curl --proxy "$proxy" --connect-timeout 10 --max-time 30 -s https://ipinfo.io/ip 2>/dev/null)
        if [ -n "$proxy_ip" ]; then
            echo -e "${GREEN}üåê IP th√¥ng qua proxy: $proxy_ip${NC}"
        fi
        
        # Get location th√¥ng qua proxy
        local location=$(curl --proxy "$proxy" --connect-timeout 10 --max-time 30 -s https://ipinfo.io/country 2>/dev/null)
        if [ -n "$location" ]; then
            echo -e "${GREEN}üìç Location: $location${NC}"
        fi
    else
        echo -e "${RED}‚ùå Proxy kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi!${NC}"
        echo -e "${YELLOW}Ki·ªÉm tra l·∫°i:${NC}"
        echo -e "- Format proxy: http://ip:port ho·∫∑c socks5://ip:port"
        echo -e "- Proxy server c√≥ ho·∫°t ƒë·ªông kh√¥ng"
        echo -e "- Firewall/network restrictions"
    fi
}

# Th·ªëng k√™ s·ª≠ d·ª•ng proxy
proxy_stats() {
    print_header
    echo -e "${YELLOW}Th·ªëng k√™ s·ª≠ d·ª•ng proxy:${NC}"
    echo ""
    
    if [ ! -f "$CONFIG_FILE" ] || [ "$(jq '.nodes | length' "$CONFIG_FILE")" -eq 0 ]; then
        echo -e "${RED}Kh√¥ng c√≥ node n√†o ƒë∆∞·ª£c c·∫•u h√¨nh!${NC}"
        return 0
    fi
    
    local total_nodes=$(jq '.nodes | length' "$CONFIG_FILE")
    local nodes_with_proxy=$(jq '.nodes | to_entries[] | select(.value.proxy != null and .value.proxy != "")' "$CONFIG_FILE" | jq -s 'length')
    local nodes_without_proxy=$((total_nodes - nodes_with_proxy))
    
    echo -e "${BLUE}üìä T·ªïng quan:${NC}"
    echo -e "  T·ªïng s·ªë node: $total_nodes"
    echo -e "  Node c√≥ proxy: $nodes_with_proxy"
    echo -e "  Node kh√¥ng proxy: $nodes_without_proxy"
    echo ""
    
    if [ $nodes_with_proxy -gt 0 ]; then
        echo -e "${BLUE}üîó Danh s√°ch proxy ƒëang s·ª≠ d·ª•ng:${NC}"
        jq -r '.nodes | to_entries[] | select(.value.proxy != null and .value.proxy != "") | "  \(.key): \(.value.proxy)"' "$CONFIG_FILE"
        echo ""
        
        # Ki·ªÉm tra proxy tr√πng l·∫∑p
        local unique_proxies=$(jq -r '.nodes | to_entries[] | select(.value.proxy != null and .value.proxy != "") | .value.proxy' "$CONFIG_FILE" | sort | uniq | wc -l)
        local total_proxies=$nodes_with_proxy
        
        if [ $unique_proxies -lt $total_proxies ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  C·∫£nh b√°o: C√≥ $(($total_proxies - $unique_proxies)) proxy b·ªã tr√πng l·∫∑p!${NC}"
            echo -e "${YELLOW}Proxy tr√πng l·∫∑p:${NC}"
            jq -r '.nodes | to_entries[] | select(.value.proxy != null and .value.proxy != "") | .value.proxy' "$CONFIG_FILE" | sort | uniq -d | while read -r dup_proxy; do
                echo -e "  üîÑ $dup_proxy ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi:"
                jq -r ".nodes | to_entries[] | select(.value.proxy == \"$dup_proxy\") | \"    - \(.key)\"" "$CONFIG_FILE"
            done
            echo ""
        else
            echo -e "${GREEN}‚úÖ T·∫•t c·∫£ proxy ƒë·ªÅu unique!${NC}"
            echo ""
        fi
    fi
    
    echo -e "${BLUE}üí° Khuy·∫øn ngh·ªã:${NC}"
    echo -e "  - M·ªói node n√™n s·ª≠ d·ª•ng proxy ri√™ng ƒë·ªÉ tr√°nh rate limit"
    echo -e "  - Test proxy ƒë·ªãnh k·ª≥: ./blockcast-multi-node-manager.sh test-proxy <node>"
    echo -e "  - S·ª≠ d·ª•ng proxy ·ªü c√°c qu·ªëc gia kh√°c nhau"
}

# Fix docker-compose.yml b·ªã l·ªói
fix_compose() {
    local node_name="$1"
    
    if [ -z "$node_name" ]; then
        echo -e "${RED}Vui l√≤ng ch·ªâ ƒë·ªãnh t√™n node!${NC}"
        return 1
    fi
    
    if ! jq -e ".nodes.\"$node_name\"" "$CONFIG_FILE" &> /dev/null; then
        echo -e "${RED}Node '$node_name' kh√¥ng t·ªìn t·∫°i!${NC}"
        return 1
    fi
    
    local node_dir=$(jq -r ".nodes.\"$node_name\".directory" "$CONFIG_FILE")
    local compose_file="$node_dir/docker-compose.yml"
    
    if [ ! -f "$compose_file" ]; then
        echo -e "${RED}Kh√¥ng t√¨m th·∫•y docker-compose.yml cho node '$node_name'!${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}ƒêang s·ª≠a l·ªói docker-compose.yml cho node '$node_name'...${NC}"
    
    # Backup file hi·ªán t·∫°i
    cp "$compose_file" "$compose_file.backup"
    
    # Kh√¥i ph·ª•c t·ª´ file original n·∫øu c√≥
    if [ -f "$compose_file.original" ]; then
        echo -e "${YELLOW}Kh√¥i ph·ª•c t·ª´ file original...${NC}"
        cp "$compose_file.original" "$compose_file"
    else
        echo -e "${YELLOW}T·∫£i l·∫°i docker-compose.yml t·ª´ GitHub...${NC}"
        if ! curl -fsSL "$DOCKER_COMPOSE_URL" -o "$compose_file"; then
            echo -e "${RED}Kh√¥ng th·ªÉ t·∫£i docker-compose.yml!${NC}"
            # Kh√¥i ph·ª•c backup
            cp "$compose_file.backup" "$compose_file"
            return 1
        fi
    fi
    
    # L·∫•y th√¥ng tin node
    local watchtower_port=$(jq -r ".nodes.\"$node_name\".watchtower_port" "$CONFIG_FILE")
    local proxy=$(jq -r ".nodes.\"$node_name\".proxy" "$CONFIG_FILE")
    
    # Apply modifications l·∫°i
    modify_docker_compose "$compose_file" "$watchtower_port" "$node_name" "$proxy"
    
    echo -e "${GREEN}‚úÖ ƒê√£ s·ª≠a l·ªói docker-compose.yml th√†nh c√¥ng!${NC}"
    echo -e "${YELLOW}File backup ƒë∆∞·ª£c l∆∞u t·∫°i: $compose_file.backup${NC}"
    
    # Test syntax
    cd "$node_dir"
    if docker compose config >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Docker-compose syntax h·ª£p l·ªá!${NC}"
        echo -e "${YELLOW}B·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông node: ./blockcast-multi-node-manager.sh start $node_name${NC}"
    else
        echo -e "${RED}‚ùå V·∫´n c√≤n l·ªói syntax. Ki·ªÉm tra l·∫°i file docker-compose.yml${NC}"
    fi
}

# Test proxy connection
test_proxy() {
    local proxy="$1"
    
    if [ -z "$proxy" ]; then
        echo -e "${RED}Vui l√≤ng cung c·∫•p proxy ƒë·ªÉ test!${NC}"
        echo -e "${YELLOW}S·ª≠ d·ª•ng: $0 test-proxy <proxy_url>${NC}"
        return 1
    fi
    
    echo -e "${YELLOW}Testing proxy: $proxy${NC}"
    
    # Test k·∫øt n·ªëi c∆° b·∫£n
    if curl --proxy "$proxy" --connect-timeout 10 -s https://httpbin.org/ip > /dev/null; then
        echo -e "${GREEN}‚úÖ Proxy k·∫øt n·ªëi th√†nh c√¥ng!${NC}"
        
        # L·∫•y IP qua proxy
        local proxy_ip=$(curl --proxy "$proxy" --connect-timeout 10 -s https://httpbin.org/ip | jq -r '.origin' 2>/dev/null)
        if [ -n "$proxy_ip" ] && [ "$proxy_ip" != "null" ]; then
            echo -e "${GREEN}üåê IP qua proxy: $proxy_ip${NC}"
        fi
        
        # L·∫•y IP tr·ª±c ti·∫øp (kh√¥ng qua proxy)
        local direct_ip=$(curl --connect-timeout 10 -s https://httpbin.org/ip | jq -r '.origin' 2>/dev/null)
        if [ -n "$direct_ip" ] && [ "$direct_ip" != "null" ]; then
            echo -e "${BLUE}üè† IP tr·ª±c ti·∫øp: $direct_ip${NC}"
        fi
        
        # So s√°nh
        if [ "$proxy_ip" != "$direct_ip" ]; then
            echo -e "${GREEN}‚úÖ Proxy ƒëang ho·∫°t ƒë·ªông - IP kh√°c nhau${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  C·∫£nh b√°o: IP gi·ªëng nhau, proxy c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông${NC}"
        fi
        
    else
        echo -e "${RED}‚ùå Proxy kh√¥ng th·ªÉ k·∫øt n·ªëi!${NC}"
        return 1
    fi
}

# Test IP c·ªßa node
test_node_ip() {
    local node_name="$1"
    
    if [ -z "$node_name" ]; then
        echo -e "${RED}Vui l√≤ng ch·ªâ ƒë·ªãnh t√™n node!${NC}"
        return 1
    fi
    
    if ! jq -e ".nodes.\"$node_name\"" "$CONFIG_FILE" &> /dev/null; then
        echo -e "${RED}Node '$node_name' kh√¥ng t·ªìn t·∫°i!${NC}"
        return 1
    fi
    
    local node_dir=$(jq -r ".nodes.\"$node_name\".directory" "$CONFIG_FILE")
    local proxy=$(jq -r ".nodes.\"$node_name\".proxy // empty" "$CONFIG_FILE")
    
    echo -e "${YELLOW}Ki·ªÉm tra IP c·ªßa node '$node_name'...${NC}"
    
    if [ -n "$proxy" ]; then
        echo -e "${BLUE}Node ƒë∆∞·ª£c c·∫•u h√¨nh proxy: $proxy${NC}"
    else
        echo -e "${BLUE}Node kh√¥ng s·ª≠ d·ª•ng proxy${NC}"
    fi
    
    cd "$node_dir"
    
    # Ki·ªÉm tra container c√≥ ƒëang ch·∫°y kh√¥ng
    if docker compose version &> /dev/null; then
        if ! docker compose ps | grep -q "Up"; then
            echo -e "${RED}Node ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông!${NC}"
            return 1
        fi
        
        # Test IP t·ª´ trong container
        echo -e "${YELLOW}Testing IP t·ª´ container beacond...${NC}"
        local container_ip=$(docker compose exec -T beacond curl -s --connect-timeout 5 https://httpbin.org/ip 2>/dev/null | jq -r '.origin' 2>/dev/null)
        
        if [ -n "$container_ip" ] && [ "$container_ip" != "null" ]; then
            echo -e "${GREEN}üîç IP t·ª´ container: $container_ip${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y IP t·ª´ container${NC}"
        fi
        
        # So s√°nh v·ªõi IP host
        local host_ip=$(curl -s --connect-timeout 5 https://httpbin.org/ip | jq -r '.origin' 2>/dev/null)
        if [ -n "$host_ip" ] && [ "$host_ip" != "null" ]; then
            echo -e "${BLUE}üè† IP c·ªßa host: $host_ip${NC}"
            
            if [ "$container_ip" != "$host_ip" ]; then
                echo -e "${GREEN}‚úÖ Container ƒëang s·ª≠ d·ª•ng IP kh√°c v·ªõi host${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Container ƒëang s·ª≠ d·ª•ng c√πng IP v·ªõi host${NC}"
            fi
        fi
        
        # N·∫øu c√≥ proxy, test xem proxy c√≥ ho·∫°t ƒë·ªông kh√¥ng
        if [ -n "$proxy" ]; then
            echo -e "${YELLOW}Testing proxy tr·ª±c ti·∫øp...${NC}"
            test_proxy "$proxy"
        fi
        
    else
        echo -e "${RED}Docker compose kh√¥ng c√≥ s·∫µn!${NC}"
        return 1
    fi
}

# Main function
main() {
    case "$1" in
        "setup")
            setup_initial
            ;;
        "add-node")
            add_node
            ;;
        "start")
            start_node "$2"
            ;;
        "stop")
            stop_node "$2"
            ;;
        "restart")
            restart_node "$2"
            ;;
        "status")
            check_status
            ;;
        "logs")
            view_logs "$2" "$3"
            ;;
        "init")
            init_node "$2"
            ;;
        "remove")
            remove_node "$2"
            ;;
        "list")
            list_nodes
            ;;
        "backup")
            backup_config
            ;;
        "test-proxy")
            test_proxy "$2"
            ;;
        "test-node-ip")
            test_node_ip "$2"
            ;;
        "proxy-stats")
            proxy_stats
            ;;
        "fix-compose")
            fix_compose "$2"
            ;;
        "help"|"--help"|"-h"|"")
            print_header
            show_help
            ;;
        *)
            echo -e "${RED}L·ªánh kh√¥ng h·ª£p l·ªá: $1${NC}"
            show_help
            exit 1
            ;;
    esac
}

# Ch·∫°y main function
main "$@"